// IntelliJ API Decompiler stub source generated from a class file
// Implementation of methods is not available

package kotlin.collections

<symbolName descr="null">public</symbolName> val kotlin.collections.<symbolName descr="null">Collection</symbolName><*>.<symbolName descr="null">indices</symbolName>: kotlin.ranges.<symbolName descr="null">IntRange</symbolName> /* compiled code */
    <symbolName descr="null">public</symbolName> <symbolName descr="null">final</symbolName> <symbolName descr="null">get</symbolName>

<symbolName descr="null">public</symbolName> val <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">lastIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> /* compiled code */
    <symbolName descr="null">public</symbolName> <symbolName descr="null">final</symbolName> <symbolName descr="null">get</symbolName>

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">List</symbolName>(<symbolName descr="null">size</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>, <symbolName descr="null">init</symbolName>: (kotlin.<symbolName descr="null">Int</symbolName>) -> <symbolName descr="null">T</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">MutableList</symbolName>(<symbolName descr="null">size</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>, <symbolName descr="null">init</symbolName>: (kotlin.<symbolName descr="null">Int</symbolName>) -> <symbolName descr="null">T</symbolName>): kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">arrayListOf</symbolName>(): kotlin.collections.<symbolName descr="null">ArrayList</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">arrayListOf</symbolName>(<symbolName descr="null">vararg</symbolName> <symbolName descr="null">elements</symbolName>: <symbolName descr="null">T</symbolName>): kotlin.collections.<symbolName descr="null">ArrayList</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.WasExperimental</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">E</symbolName>> <symbolName descr="null">buildList</symbolName>(<symbolName descr="null">capacity</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>, <symbolName descr="null">@kotlin.BuilderInference</symbolName> <symbolName descr="null">builderAction</symbolName>: kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">E</symbolName>>.() -> kotlin.<symbolName descr="null">Unit</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">E</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.WasExperimental</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">E</symbolName>> <symbolName descr="null">buildList</symbolName>(<symbolName descr="null">@kotlin.BuilderInference</symbolName> <symbolName descr="null">builderAction</symbolName>: kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">E</symbolName>>.() -> kotlin.<symbolName descr="null">Unit</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">E</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.PublishedApi</symbolName> <symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">internal</symbolName> <symbolName descr="null">expect</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">E</symbolName>> <symbolName descr="null">buildListInternal</symbolName>(<symbolName descr="null">capacity</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>, <symbolName descr="null">builderAction</symbolName>: kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">E</symbolName>>.() -> kotlin.<symbolName descr="null">Unit</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">E</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.PublishedApi</symbolName> <symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">internal</symbolName> <symbolName descr="null">expect</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">E</symbolName>> <symbolName descr="null">buildListInternal</symbolName>(<symbolName descr="null">builderAction</symbolName>: kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">E</symbolName>>.() -> kotlin.<symbolName descr="null">Unit</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">E</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.PublishedApi</symbolName> <symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">internal</symbolName> <symbolName descr="null">expect</symbolName> fun <symbolName descr="null">checkCountOverflow</symbolName>(<symbolName descr="null">count</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>): kotlin.<symbolName descr="null">Int</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.PublishedApi</symbolName> <symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">internal</symbolName> <symbolName descr="null">expect</symbolName> fun <symbolName descr="null">checkIndexOverflow</symbolName>(<symbolName descr="null">index</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>): kotlin.<symbolName descr="null">Int</symbolName> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">emptyList</symbolName>(): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">listOf</symbolName>(): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">expect</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">listOf</symbolName>(<symbolName descr="null">element</symbolName>: <symbolName descr="null">T</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">listOf</symbolName>(<symbolName descr="null">vararg</symbolName> <symbolName descr="null">elements</symbolName>: <symbolName descr="null">T</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName> : kotlin.<symbolName descr="null">Any</symbolName>> <symbolName descr="null">listOfNotNull</symbolName>(<symbolName descr="null">element</symbolName>: <symbolName descr="null">T</symbolName>?): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName> : kotlin.<symbolName descr="null">Any</symbolName>> <symbolName descr="null">listOfNotNull</symbolName>(<symbolName descr="null">vararg</symbolName> <symbolName descr="null">elements</symbolName>: <symbolName descr="null">T</symbolName>?): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">mutableListOf</symbolName>(): kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> <symbolName descr="null">mutableListOf</symbolName>(<symbolName descr="null">vararg</symbolName> <symbolName descr="null">elements</symbolName>: <symbolName descr="null">T</symbolName>): kotlin.collections.<symbolName descr="null">MutableList</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">private</symbolName> fun <symbolName descr="null">rangeCheck</symbolName>(<symbolName descr="null">size</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>, <symbolName descr="null">fromIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>, <symbolName descr="null">toIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName>): kotlin.<symbolName descr="null">Unit</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.PublishedApi</symbolName> <symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">internal</symbolName> fun <symbolName descr="null">throwCountOverflow</symbolName>(): kotlin.<symbolName descr="null">Unit</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.PublishedApi</symbolName> <symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">internal</symbolName> fun <symbolName descr="null">throwIndexOverflow</symbolName>(): kotlin.<symbolName descr="null">Unit</symbolName> { /* compiled code */ }

<symbolName descr="null">internal</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.<symbolName descr="null">Array</symbolName><<symbolName descr="null">out</symbolName> <symbolName descr="null">T</symbolName>>.<symbolName descr="null">asCollection</symbolName>(): kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">binarySearch</symbolName>(<symbolName descr="null">element</symbolName>: <symbolName descr="null">T</symbolName>, <symbolName descr="null">comparator</symbolName>: kotlin.<symbolName descr="null">Comparator</symbolName><in <symbolName descr="null">T</symbolName>>, <symbolName descr="null">fromIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE, <symbolName descr="null">toIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE): kotlin.<symbolName descr="null">Int</symbolName> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">binarySearch</symbolName>(<symbolName descr="null">fromIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE, <symbolName descr="null">toIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE, <symbolName descr="null">comparison</symbolName>: (<symbolName descr="null">T</symbolName>) -> kotlin.<symbolName descr="null">Int</symbolName>): kotlin.<symbolName descr="null">Int</symbolName> { /* compiled code */ }

<symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName> : kotlin.<symbolName descr="null">Comparable</symbolName><<symbolName descr="null">T</symbolName>>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>?>.<symbolName descr="null">binarySearch</symbolName>(<symbolName descr="null">element</symbolName>: <symbolName descr="null">T</symbolName>?, <symbolName descr="null">fromIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE, <symbolName descr="null">toIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE): kotlin.<symbolName descr="null">Int</symbolName> { /* compiled code */ }

<symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>, <symbolName descr="null">K</symbolName> : kotlin.<symbolName descr="null">Comparable</symbolName><<symbolName descr="null">K</symbolName>>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">binarySearchBy</symbolName>(<symbolName descr="null">key</symbolName>: <symbolName descr="null">K</symbolName>?, <symbolName descr="null">fromIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE, <symbolName descr="null">toIndex</symbolName>: kotlin.<symbolName descr="null">Int</symbolName> = COMPILED_CODE, <symbolName descr="null">crossinline</symbolName> <symbolName descr="null">selector</symbolName>: (<symbolName descr="null">T</symbolName>) -> <symbolName descr="null">K</symbolName>?): kotlin.<symbolName descr="null">Int</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">@kotlin.internal.OnlyInputTypes</symbolName> <symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">containsAll</symbolName>(<symbolName descr="null">elements</symbolName>: kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>>): kotlin.<symbolName descr="null">Boolean</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">C</symbolName> : kotlin.collections.<symbolName descr="null">Collection</symbolName><*>, <symbolName descr="null">R</symbolName>> <symbolName descr="null">C</symbolName>.<symbolName descr="null">ifEmpty</symbolName>(<symbolName descr="null">defaultValue</symbolName>: () -> <symbolName descr="null">R</symbolName>): <symbolName descr="null">R</symbolName> <symbolName descr="null">where</symbolName> <symbolName descr="null">C</symbolName> : <symbolName descr="null">R</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">isNotEmpty</symbolName>(): kotlin.<symbolName descr="null">Boolean</symbolName> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>>?.<symbolName descr="null">isNullOrEmpty</symbolName>(): kotlin.<symbolName descr="null">Boolean</symbolName> { /* compiled code */ }

<symbolName descr="null">internal</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">optimizeReadOnlyList</symbolName>(): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>>?.<symbolName descr="null">orEmpty</symbolName>(): kotlin.collections.<symbolName descr="null">Collection</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.internal.InlineOnly</symbolName> <symbolName descr="null">public</symbolName> <symbolName descr="null">inline</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>>?.<symbolName descr="null">orEmpty</symbolName>(): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

<symbolName descr="null">@kotlin.SinceKotlin</symbolName> <symbolName descr="null">public</symbolName> fun <<symbolName descr="null">T</symbolName>> kotlin.collections.<symbolName descr="null">Iterable</symbolName><<symbolName descr="null">T</symbolName>>.<symbolName descr="null">shuffled</symbolName>(<symbolName descr="null">random</symbolName>: kotlin.random.<symbolName descr="null">Random</symbolName>): kotlin.collections.<symbolName descr="null">List</symbolName><<symbolName descr="null">T</symbolName>> { /* compiled code */ }

